{"version":3,"file":"static/js/76.4c6738e0.chunk.js","mappings":"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","sources":["projects/market/App.js"],"sourcesContent":["import React, {\n    useState,\n    useEffect,\n} from 'react';\nimport './main.css';\nimport {\n    Container,\n    Row,\n    Col,\n    Button,\n} from 'react-bootstrap';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n  } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\nconst chartOptions = {\n    maintainAspectRatio: false,\n    responsive: true,\n    plugins: {\n        legend: {\n            display: true,\n        },\n    },\n    animation: false,\n    radius: 0,\n    borderWidth: 2,\n};\n\n\n\n\nfunction App() {\n    const [money, setMoney] = useState(1000);\n    const [borrow, setBorrow] = useState(0);\n    const [assets, setAssets] = useState(0);\n    const [float, setFloat] = useState(money);\n    const [advisory, setAdvisory] = useState(\"Speed on Fast, Chart will scroll when it gets too large\");\n    const [priceArray, setPriceArray] = useState([200]);\n    const [labelArray, setLabelArray] = useState([0]);\n    const [lastPrice, setLastPrice] = useState(200);\n    const [chartSpeed, setChartSpeed] = useState(100);\n    const [chartAdvisoryLock, setChartAdvisoryLock] = useState(false);\n    const maxChartLength = 500;\n    const priceStep = 1;\n    let momentumFlip = 5;\n\n    \n\n    // price scheduler\n    useEffect(() => {\n        // price engine\n        const newPrice = () => {\n            // price disturbances by modifying momentumFlip\n\n\n            // ----\n            if(lastPrice < 10){\n                // least, starting with lowest\n                // less than 10\n                momentumFlip = 1;\n            }else if(lastPrice < 50){\n                // less than 50\n                momentumFlip = 2;\n            }else if(lastPrice < 100){\n                // less than 100\n                momentumFlip = 4;\n\n                \n            // ----\n            }else if(lastPrice > 350){\n                // greater, starting with highest\n                // greater than 350\n                momentumFlip = 6;\n            }else if(lastPrice > 300){\n                // greater than 300\n                momentumFlip = 8;\n            }else if(lastPrice > 350){\n                // greater than 350\n                momentumFlip = 9;\n            }else{\n                // no chance to momentum\n            };\n\n            // price jump allows price to move by 1, 2, or 3x of priceStep\n            let priceJump;\n            let randomJump = Math.floor((Math.random() * 10) + 0);\n            if(randomJump > 5){\n                // double\n                priceJump = (priceStep * 2);\n            }else if(randomJump > 8){\n                // triple\n                priceJump = (priceStep * 3);\n            }else if(randomJump === 0){\n                // random crash chance\n                momentumFlip = 10;\n                priceJump = (priceStep * 6);\n            }else if(randomJump === 1){\n                // random spike chance\n                momentumFlip = 0;\n                priceJump = (priceStep * 6);\n            }else{\n                // less than 6, do nothing\n                priceJump = priceStep;\n            };\n\n            /*\n            random chance with a momentum divider\n            11 total, 0-10, consider momentumFlip 5: 0-4:drop 5:stay 6-10:raise\n            if momentumFlip goes up means higher chance to drop\n            */\n            let price;\n            let randomFlip = Math.floor((Math.random() * 10) + 0);\n            if(randomFlip === momentumFlip){\n                // no price change\n                price = lastPrice;\n            }else if(randomFlip > momentumFlip){\n                // raise price\n                price = lastPrice + priceJump;\n            }else if(randomFlip < momentumFlip){\n                // lower price\n                price = lastPrice - priceJump;\n            };\n\n            // min price of 1\n            price = Math.max(price, 1);\n\n            // update dynamic lastPrice\n            setLastPrice(price);\n\n            return(price);\n        };\n\n        const interval = setInterval(() => {\n            // run per time schedule\n            newPrice();\n            if(assets > 0){\n                setFloat(money + (lastPrice * assets));\n            }else if(assets < 0){\n                setFloat(money + borrow - (Math.abs(assets) * lastPrice));\n            };\n\n            let arrayLength = [...priceArray].length;\n            if(arrayLength > (maxChartLength - 1)){\n                // hit max chart, so shift\n                let innerPrice = [...priceArray];\n                innerPrice.shift();\n                setPriceArray([...innerPrice, lastPrice]);\n\n                if(chartAdvisoryLock === false){\n                    setAdvisory(\"Chart will now scroll\");\n                    setChartAdvisoryLock(true);\n                };\n\n            }else{\n                // not hit max, do nothing else\n                setLabelArray(current => [...current, 0]);\n                setPriceArray(current => [...current, lastPrice]);\n            }\n        }, chartSpeed);\n        return () => clearInterval(interval);\n    }, [priceArray]);\n\n    const data = {\n        labels: labelArray,\n        datasets: [{\n            label: 'Price of one EmCoin in ยง Simoleons',\n            data: priceArray,\n            borderColor: 'rgb(255, 99, 132)',\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\n            pointStyle: 0,\n        }],\n    };\n\n    const buyAsset = () => {\n        if(assets < 0){\n            // covering\n            if(assets === -1){\n                // specifically if you are covering the last asset\n                setAssets(assets + 1);\n                setMoney(money + (borrow - lastPrice))\n                setBorrow(0);\n                setAdvisory(\"covered @ +\" + lastPrice);\n            }else{\n                // covering more than 1 asset\n                let individualBorrow = Math.floor(borrow / Math.abs(assets));\n                setAssets(assets + 1);\n                setMoney(money + (individualBorrow - lastPrice));\n                setBorrow(borrow - individualBorrow);\n                setAdvisory(\"covered @ +\" + lastPrice);\n            }\n        }else{\n            // regular buy\n            // has cash check\n            if(money >= lastPrice){\n                setAssets(assets + 1);\n                setMoney(money - lastPrice);\n                setAdvisory(\"bought @ +\" + lastPrice);\n            }else{\n                // not enough\n                setAdvisory(\"not enough money to buy!\");\n            };\n        };\n    };\n\n    const sellAsset = () => {\n        // check if borrowing\n        if(assets < 1){\n            // borrow\n            // check borrow rate\n            if((borrow + lastPrice) > (money / 2)){\n                setAdvisory(\"can't borrow more than 50% of your money to short!\");\n            }else{\n                // allowed to borrow\n                setAssets(assets - 1);\n                setBorrow(borrow + lastPrice);\n                setAdvisory(\"borrowed @ -\" + lastPrice);\n            }\n        }else{\n            // regular sell\n            setAssets(assets - 1);\n            setMoney(money + lastPrice);\n            setAdvisory(\"sold @ -\" + lastPrice);\n        };\n    };\n\n    const flattenAsset = () => {\n        // check assets\n        if(assets === 0){\n            // nothing to flatten\n            setAdvisory(\"you are not in any trades to flatten!\");\n        }else if(assets > 0){\n            // need to sell\n            setAssets(0);\n            setMoney(money + (assets * lastPrice));\n            setAdvisory(\"sold qty: \" + assets + \" @ -\" + lastPrice + \" ea = \" + (lastPrice * assets) + \" total\");\n        }else if(assets < 0){\n            // need to cover\n            setAssets(0);\n            setMoney(money + (borrow - (lastPrice * Math.abs(assets))));\n            setBorrow(0);\n            setAdvisory(\"covered qty: \" + assets + \" @ -\" + lastPrice + \" ea = \" + (lastPrice * assets) + \" total\");\n        };\n    };\n\n    return (\n        <Container id=\"main-container-mkt\" className=\"pt-3\">\n            <Row className=\"justify-content-center flex-row d-flex\">\n                <Col>\n                    <Row className=\"align-items-center\">\n                        <Col xs=\"auto\">\n                            <h4 className=\"mkt\">Speed: </h4>\n                        </Col>\n                        <Col xs=\"auto\" className=\"px-1\">\n                            <Button className=\"mkt\" onClick={() => {\n                                setChartSpeed(500);\n                                setAdvisory(\"Speed set to Slow\");\n                            }}>Slow</Button>\n                        </Col>\n                        <Col xs=\"auto\" className=\"px-1\">\n                            <Button className=\"mkt\" onClick={() => {\n                                setChartSpeed(100);\n                                setAdvisory(\"Speed set to Fast\");\n                            }}>Fast</Button>\n                        </Col>\n                        <Col xs=\"auto\" className=\"px-1\">\n                            <Button className=\"mkt\" onClick={() => {\n                                setChartSpeed(10);\n                                setAdvisory(\"Speed set to Superfast\");\n                            }}>Superfast</Button>\n                        </Col>\n                    </Row>\n                </Col>\n                <Col>\n                    <Row className=\"justify-content-end pr-5 align-items-center\">\n                        <Col xs=\"auto\" className=\"pr-4\">\n                            <h4 className=\"mktlg\">Money: ยง{money}</h4>\n                        </Col>\n                        <Col xs=\"auto\" className=\"pr-4\">\n                            <h4 className=\"mktlg\">EmCoin: {assets}</h4>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-end mt-1 pr-5 align-items-center\">\n                        <Col xs=\"auto\" className=\"pr-4\">\n                            <h4 className=\"mktsm\">Floating Equity: ยง{float}</h4>\n                        </Col>\n                        <Col xs=\"auto\" className=\"pr-4\">\n                            <h4 className=\"mktsm\">Borrowed for shorting: ยง{borrow}</h4>\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n            <Row className=\"mt-1\">\n                <Col>\n                    <h4 className=\"mkt\">Last Notification: {advisory}</h4>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Line options={chartOptions} height={400} data={data} />\n                </Col>\n            </Row>\n            <Row className=\"my-3 ml-5 align-items-center\">\n                <Col xs=\"auto\" className=\"px-1\">\n                    <Button onClick={() => buyAsset()}>Buy</Button>\n                </Col>\n                <Col xs=\"auto\" className=\"px-1\">\n                    <Button onClick={() => sellAsset()}>Sell</Button>\n                </Col>\n                <Col xs=\"auto\" className=\"px-1\">\n                    <Button onClick={() => flattenAsset()}>Flatten</Button>\n                </Col>\n                <Col xs=\"auto\" className=\"pl-5\">\n                    <h4 className=\"mkt\">Last Price: {lastPrice}</h4>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;"],"names":["ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","chartOptions","maintainAspectRatio","responsive","plugins","legend","display","animation","radius","borderWidth","useState","money","setMoney","borrow","setBorrow","assets","setAssets","float","setFloat","advisory","setAdvisory","priceArray","setPriceArray","labelArray","setLabelArray","lastPrice","setLastPrice","chartSpeed","setChartSpeed","chartAdvisoryLock","setChartAdvisoryLock","momentumFlip","useEffect","interval","setInterval","priceJump","price","randomJump","Math","floor","random","priceStep","randomFlip","max","newPrice","abs","length","maxChartLength","innerPrice","shift","current","clearInterval","data","labels","datasets","label","borderColor","backgroundColor","pointStyle","Container","id","className","Row","Col","xs","Button","onClick","options","height","individualBorrow","buyAsset"],"sourceRoot":""}