{"version":3,"file":"static/js/795.74acd5a8.chunk.js","mappings":"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","sources":["projects/dvnametags/js/NavPage.js","projects/dvnametags/js/App.js","projects/dvnametags/js/HomePage.js","projects/dvnametags/js/StatusPage.js","projects/dvnametags/js/textValidation.js","projects/dvnametags/js/CreateTagPage.js","js/Projects.js","projects/dvnametags/js/CreatePreviewImage.js"],"sourcesContent":["import React from 'react';\r\nimport { Navbar, Container } from 'react-bootstrap';\r\nimport '../css/nav.css';\r\nimport '../css/app.css';\r\n\r\nfunction NavPage() {\r\n    return (\r\n        <Container className=\"title-banner-container print-hide\">\r\n            <Navbar id=\"title-banner-dv\">\r\n                <h3 id=\"banner-h3-dv\">\r\n                    Deer Valley Nametags\r\n                </h3>\r\n                <p id=\"under-banner-dv\">\r\n                    (Demo Only)\r\n                </p>\r\n            </Navbar>\r\n        </Container>\r\n    );\r\n  }\r\n  \r\n  export default NavPage;\r\n  ","import React from 'react';\nimport '../css/app.css';\nimport { \n  Container,\n  Col\n} from 'react-bootstrap';\nimport {\n    Outlet\n} from \"react-router-dom\";\nimport NavPage from './NavPage.js';\n\n\nfunction DVnametags() {\n\n    return (\n        <Container id=\"main-content-container-dv\">\n            <NavPage />\n            <Col>\n                <Outlet />\n            </Col>\n        </Container>\n    );\n}\n\nexport default DVnametags;\n","import React from 'react';\r\nimport { \r\n    Container,\r\n    Row,\r\n    Col,\r\n    Button\r\n} from 'react-bootstrap';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\nimport '../css/nav.css';\r\nimport CreatePreviewImage from './CreatePreviewImage.js';\r\n\r\n\r\nfunction HomePage() {\r\n    // here is where we list out the starting tags, data format first\r\n    const startingTags = [{\r\n        colorCode: 1,\r\n        name: \"Green Tag\",\r\n        secondLine: \"Indoor\",\r\n        thirdLine: \"\"\r\n    },{\r\n        colorCode: 2,\r\n        name: \"Green Tag Deerhead\",\r\n        secondLine: \"Indoor\",\r\n        thirdLine: \"\"\r\n    },{\r\n        colorCode: 3,\r\n        name: \"Bronze Tag\",\r\n        secondLine: \"Indoor Lodges\",\r\n        thirdLine: \"\"\r\n    },{\r\n        colorCode: 15,\r\n        name: \"Black Tag\",\r\n        secondLine: \"Indoor\",\r\n        thirdLine: \"\"\r\n    },{\r\n        colorCode: 14,\r\n        name: \"Black Diamond Tag\",\r\n        secondLine: \"-----------------------------\",\r\n        thirdLine: \"Black Diamond Lodge\"\r\n    },{\r\n        colorCode: 16,\r\n        name: \"Club 1981 Tag\",\r\n        secondLine: \"Club 1981\",\r\n        thirdLine: \"\"\r\n    },{\r\n        colorCode: 4,\r\n        name: \"Outdoor Velcro Tag\",\r\n        secondLine: \"Regular Outdoor\",\r\n        thirdLine: \"\"\r\n    },{\r\n        colorCode: 12,\r\n        name: \"Ski Patrol\",\r\n        secondLine: \"Ski Patrol Only\",\r\n        thirdLine: \"\"\r\n    },{\r\n        colorCode: 13,\r\n        name: \"Old Black Card Tags\",\r\n        secondLine: \"Old Under Armour Window Tags\",\r\n        thirdLine: \"\"\r\n    }];\r\n\r\n    return (\r\n        <Container className=\"mt-1 justify-content-center\">\r\n            <Row className=\"justify-content-center nav-h4-bar-bg\">\r\n                <Col xs=\"auto\">\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        CLICK TAG TYPE TO GET STARTED or GOTO\r\n                    </h4>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                    <Link to=\"status\">\r\n                        <Button>\r\n                            ORDER STATUS\r\n                        </Button>\r\n                    </Link>\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"justify-content-between mt-3\">\r\n                {\r\n                    startingTags.map(( mapItem, index ) => \r\n                        <Col className=\"p-0 mb-1 justify-content-center start-tag-container\" xs=\"auto\" key={ index }>\r\n                            <div className=\"start-tag\">\r\n                                <Link to={\"create/\" + mapItem.colorCode}>\r\n                                    <CreatePreviewImage data={ mapItem } />\r\n                                </Link>\r\n                            </div>\r\n                        </Col>\r\n                    )\r\n                }\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n  \r\nexport default HomePage;","import React, { \r\n    useState,\r\n    useEffect,\r\n    Suspense,\r\n    lazy\r\n} from 'react';\r\nimport { \r\n    Container, \r\n    Button,\r\n    Row,\r\n    Col,\r\n    Spinner,\r\n    InputGroup,\r\n    FormControl\r\n} from 'react-bootstrap';\r\nimport { \r\n    Link,\r\n} from \"react-router-dom\";\r\nimport '../css/nav.css';\r\nimport '../css/tags.css';\r\nimport '../css/admin.css';\r\n\r\n\r\n// lazy loads\r\nconst CreatePreviewImage = lazy( () => import('./CreatePreviewImage.js'));\r\n\r\n\r\n// lazy load spinner\r\nconst renderLoader = (\r\n    <Spinner variant=\"danger\" animation=\"border\" role=\"status\">\r\n      <span className=\"sr-only\">\r\n        Loading...\r\n      </span>\r\n    </Spinner>\r\n);\r\n\r\n\r\nfunction StatusPage(){\r\n    // demo: preload with data\r\n    const[dataRow, setDataRow] = useState([{\r\n        id: 0,\r\n        data: {\r\n            color: 3,\r\n            name: \"Max Powers\",\r\n            titlecity: \"Lodging\",\r\n            comments: \"\",\r\n            requestor: \"max in lodging\",\r\n            status: \"Still Working...\",\r\n            statusClass: \"status-yellow\",\r\n            daysAgo: 0.2,\r\n            quantity: \"1-PIN + 1-MAGNET\",\r\n        }\r\n    },{\r\n        id: 1,\r\n        data: {\r\n            color: 12,\r\n            name: \"Lisa Livesaver\",\r\n            titlecity: \"Head Safety Supervisor\",\r\n            comments: \"ski patrol at silver lake thx\",\r\n            requestor: \"Felice\",\r\n            thirdline: \"Ski Patrol\",\r\n            status: \"Still Working...\",\r\n            statusClass: \"status-yellow\",\r\n            daysAgo: 1.7,\r\n            quantity: \"3-VELCRO\",\r\n        }\r\n    },{\r\n        id: 2,\r\n        data: {\r\n            color: 2,\r\n            name: \"Dodge Chefman\",\r\n            titlecity: \"Empire Chef\",\r\n            comments: \"\",\r\n            requestor: \"keep @ emp\",\r\n            status: \"Done!\",\r\n            statusClass: \"status-green\",\r\n            daysAgo: 2.4,\r\n            quantity: \"2-PINS\",\r\n        }\r\n    }]);\r\n\r\n    const clearLocalStorage = () => {\r\n        // clear actual localStorage\r\n        localStorage.clear();\r\n\r\n        // emulate clearing tags by setting dataRow to nothing\r\n        setDataRow();\r\n    };\r\n\r\n    /*\r\n    useEffect(() => {\r\n    }, [dataRow]);\r\n    */\r\n\r\n    // grab localStorage objects after page done\r\n    useEffect(() => {\r\n        // grab any data and jsonify\r\n        let tagData = JSON.parse(localStorage.getItem(\"tagData\"));\r\n        let innerDataRow = [];\r\n\r\n        // null catch\r\n        if(tagData == null){\r\n            // no local storage, do nothing\r\n        }else{\r\n            // data exists\r\n            for(let i = 0; i < tagData.length; i++){\r\n                // catch double tag\r\n                innerDataRow.push({\r\n                    id: (3 + i),\r\n                    data: {\r\n                        color: tagData[i].colorCode,\r\n                        name: tagData[i].name,\r\n                        titlecity: tagData[i].titlecity,\r\n                        comments: tagData[i].comments,\r\n                        requestor: tagData[i].requestor,\r\n                        status: \"Still working...\",\r\n                        statusClass: \"status-yellow\",\r\n                        daysAgo: 0.1,\r\n                        quantity: tagData[i].quantity,\r\n                    },\r\n                });\r\n            };\r\n            /*\r\n            console.log(oldDataRow);\r\n            */\r\n            setDataRow(current => [...innerDataRow, ...current]);\r\n        };\r\n    }, []);\r\n\r\n    // return\r\n    return (\r\n        <Container>\r\n            <Row className=\"justify-content-between mt-1 nav-h4-bar-bg print-hide\">\r\n                <Col className=\"p-0\">\r\n                    <Link to=\"/dv/\">\r\n                        <Button>\r\n                            HOME\r\n                        </Button>\r\n                    </Link>\r\n                </Col>\r\n                <Col>\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        STATUS for UNFINISHED TAGS:\r\n                    </h4>\r\n                </Col>\r\n                <Col className=\"p-0\">\r\n                <InputGroup id=\"status-search-bar\" className=\"w-100\">\r\n                    <FormControl\r\n                        placeholder=\"search disabled for demo\"\r\n                        aria-label=\"Search\"\r\n                        aria-describedby=\"basic-addon1\"\r\n                        id=\"status-search-bar-inner\"\r\n                    />\r\n                </InputGroup>\r\n                </Col>\r\n            </Row>\r\n            {\r\n                (dataRow != undefined) &&\r\n                dataRow.map((mapItem, index) => \r\n                    <Row className=\"mt-1 justify-content-between status-row\" key={ \"status-\" + index }>\r\n                        <Col xs={ 12 } md={ 6 } className=\"px-0\">\r\n                            <Suspense fallback={ renderLoader }>\r\n                                <CreatePreviewImage data={{ \r\n                                    name: mapItem.data.name,\r\n                                    secondLine: mapItem.data.titlecity,\r\n                                    thirdLine: mapItem.data.thirdline,\r\n                                    colorCode: mapItem.data.color\r\n                                }} />\r\n                            </Suspense>\r\n                        </Col>\r\n                        <Col xs={ 12 } md={ 4 } className=\"px-0\">\r\n                            <Row>\r\n                                <Col>\r\n                                    <p className=\"status-b-col-text\">Requestor: { mapItem.data.requestor }</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p className=\"status-b-col-text\">Requested: { mapItem.data.daysAgo } Days Ago</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p className=\"status-b-col-text\">Quantity: { mapItem.data.quantity }</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p className=\"status-b-col-text\">Comments: { mapItem.data.comments }</p>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col xs={ 12 } md={ 2 } className={mapItem.data.statusClass}>\r\n                            <p>STATUS: {mapItem.data.status}</p>\r\n                        </Col>\r\n                    </Row>\r\n                )\r\n            }\r\n            {\r\n                (dataRow == undefined) &&\r\n                <Row className=\"justify-content-center py-3\">\r\n                    <h3>\r\n                        There are no tags in the system!\r\n\r\n                    </h3>\r\n                </Row>\r\n            }\r\n            <Row className=\"justify-content-center\">\r\n                <Button onClick={() => clearLocalStorage()}>Clear Demo local storage</Button>\r\n            </Row>\r\n        </Container>\r\n    );\r\n  }\r\n  \r\n  export default StatusPage;","export function textValidation(inputString, minChar, strictMode){\r\n    //this will automatically convert input text and return with validated text\r\n    //console.log(\"textValidation called with: \" + inputString);\r\n    //console.log(strictMode);\r\n\r\n    /*\r\n    //check undefined\r\n    if(inputString == undefined){\r\n        //input was undefined\r\n        return 0;\r\n    }else if(inputString == \" \"){\r\n        //input was an empty string\r\n        return 0;\r\n    }else if(inputString == \"\"){\r\n        //input was an empty string\r\n        return 0;\r\n    };*/\r\n\r\n    //1st step: check all the string to make sure it has no special characters\r\n    //this is for db security purposes, only 0-9, a-Z, and !@.,?\r\n    let outputString = regexDelete(inputString, strictMode);\r\n\r\n    //1st and half step: check and cut short if string is under the minimum character limit\r\n    let stringLength = inputString.length;\r\n    if(stringLength < minChar){\r\n        //doesnt meet requirement\r\n        return \"\";\r\n    };\r\n\r\n    //2nd step: add spaces after commas\r\n    outputString = addCommaSpaces(outputString);\r\n\r\n    //3rd step: title caps everything\r\n    outputString = titleCapsify(outputString);\r\n\r\n    //4th step: check state names and shorten to abbreviation\r\n    outputString = stateToAbbv(outputString);\r\n\r\n    //console.log(outputString);\r\n    return outputString;\r\n};\r\n\r\nfunction regexDelete(string, strictMode){\r\n    // check if strict mode enabled, set regex accordingly\r\n\r\n    let regex;\r\n    if(strictMode !== undefined || strictMode === true){\r\n        // restricted name version\r\n        regex = /\\w|\\n|\\r|\\t|\\d|[,@ /&\"']|[A-Za-zÀ-ÖØ-öø-ÿ]/g;\r\n        //console.log(\"strict\");\r\n    }else{\r\n        // regular unrestricted version\r\n        regex = /\\w|\\n|\\r|\\t|\\d|[.!,?@ /&*()#$%-=+\"']|[A-Za-zÀ-ÖØ-öø-ÿ]/g; // old: /\\w|\\n|\\r|\\t|\\d|[.!,?@ ]/g, it did not allow accented characters nor /&'\"()#$%\r\n        //console.log(\"non-strict\");\r\n    };\r\n\r\n    //check if string is empty\r\n    if(string===\"\"){\r\n        //if empty, do nothing\r\n        return \"\";\r\n    }else{\r\n        //check an entire string for valid characters, then return only those\r\n        let found = string.match(regex);\r\n\r\n        //because it returns an array of all the characters, need to compile them into\r\n        //a string, join(\"\") works but join() nor toString() works without adding commas\r\n        let compiledString = found.join(\"\");\r\n\r\n        //console.dir(compiledString);\r\n        return compiledString;\r\n    }\r\n    \r\n};\r\n\r\nfunction addCommaSpaces(inputString){\r\n    //add appropriate spacing after commas if not exist\r\n\r\n    //split spaces into array\r\n    let splitString = inputString.split(\",\");\r\n\r\n    //check length of array, 1 for no comma, 2 for one comma\r\n    if(splitString.length > 1){\r\n        //has at least one comma\r\n        let stringSelection = splitString[1];\r\n\r\n        //check if the string on 2nd word starts with a space, delete if so\r\n        if(stringSelection[0] === \" \"){\r\n            //has space already, join only with comma\r\n            splitString = splitString.join(\",\");\r\n        }else{\r\n            //doesnt have space, add one\r\n            splitString = splitString.join(\", \");\r\n        };\r\n        //console.log(splitString);\r\n        \r\n        return splitString;\r\n    } else{\r\n        //has no commas, can just return w/ no modification\r\n        return inputString;\r\n    };\r\n    \r\n};\r\n\r\nfunction titleCapsify(inputString){\r\n    //title caps first letter of each word\r\n    //console.log(inputString);\r\n\r\n    //split spaces into array\r\n    let splitString = inputString.split(\" \");\r\n\r\n    //if the following is nothing it will throw an error, so delete it\r\n    //before it throws an error, this is a temporary state before adding another word\r\n    //console.dir(splitString[splitString.length - 1]);\r\n    if(splitString[splitString.length - 1] === \"\"){\r\n        //remove it from array\r\n        splitString.pop();\r\n    };\r\n    \r\n    let combinedString = splitString.map(function(word){\r\n        //make first character uppercase\r\n        let firstChar = word[0].toUpperCase();\r\n\r\n        //delete that first lowercase character\r\n        //slice in this case actually saves the remaining char's instead\r\n        word = word.slice(1);\r\n\r\n        //combine characters into a word\r\n        word = firstChar + \"\" + word;\r\n        return word;\r\n    });\r\n\r\n    //join all words together to form full name before returning\r\n    combinedString = combinedString.join(\" \");\r\n    //console.log(combinedString);\r\n    return combinedString;\r\n};\r\n\r\nfunction stateToAbbv(inputString){\r\n    //compile a list of all state names, but not Georgia since that could be the country, so don't correct it\r\n    const stateFull = [\"Alabama\", \"Alaska\",\"Arizona\",\"Arkansas\",\"California\",\"Colorado\",\"Connecticut\",\"Delaware\",\"District of Columbia\",\"Florida\",\"Hawaii\",\"Idaho\",\"Illinois\",\"Indiana\",\"Iowa\",\"Kansas\",\"Kentucky\",\"Louisiana\",\"Maine\",\"Maryland\",\"Massachusetts\",\"Michigan\",\"Minnesota\",\"Mississippi\",\"Missouri\",\"Montana\",\"Nebraska\",\"Nevada\",\"New Hampshire\",\"New Jersey\",\"New Mexico\",\"New York\",\"North Carolina\",\"North Dakota\",\"Ohio\",\"Oklahoma\",\"Oregon\",\"Pennsylvania\",\"Rhode Island\",\"South Carolina\",\"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\"Vermont\",\"Virginia\",\"Washington\",\"West Virginia\",\"Wisconsin\",\"Wyoming\"];\r\n    const stateAbbv = [\"AL\",\"AK\",\"AZ\",\"AR\",\"CA\",\"CO\",\"CT\",\"DE\",\"DC\",\"FL\",\"HI\",\"ID\",\"IL\",\"IN\",\"IA\",\"KS\",\"KY\",\"LA\",\"ME\",\"MD\",\"MA\",\"MI\",\"MN\",\"MS\",\"MO\",\"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\"NM\",\"NY\",\"NC\",\"ND\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VT\",\"VA\",\"WA\",\"WV\",\"WI\",\"WY\"];\r\n    const stateAbbvTitleCaps = [\"Al\",\"Ak\",\"Az\",\"Ar\",\"Ca\",\"Co\",\"Ct\",\"De\",\"Dc\",\"Fl\",\"Hi\",\"Id\",\"Il\",\"In\",\"Ia\",\"Ks\",\"Ky\",\"La\",\"Me\",\"Md\",\"Ma\",\"Mi\",\"Mn\",\"Ms\",\"Mo\",\"Mt\",\"Ne\",\"Nv\",\"Nh\",\"Nj\",\"Nm\",\"Ny\",\"Nc\",\"Nd\",\"Oh\",\"Ok\",\"Or\",\"Pa\",\"Ri\",\"Sc\",\"Sd\",\"Tn\",\"Tx\",\"Ut\",\"Vt\",\"Va\",\"Wa\",\"Wv\",\"Wi\",\"Wy\"];\r\n    //console.log(stateFull.length); //stateAbbvTitleCaps is just for searching purposes\r\n\r\n    //split and grab the 2nd item in array, check to see if its a state name\r\n    let splitString = inputString.split(\",\");\r\n    \r\n    // sometimes there is an escape \\r, so regex it out so it can properly validate multi tag excel inputs\r\n    let lastIndex = splitString.length - 1;\r\n    splitString[lastIndex] = splitString[lastIndex].replace(/(\\r\\n|\\n|\\r)/gm, \"\");\r\n    //console.log(splitString);\r\n    \r\n    //get rid of the first character which is a space thanks to add comma spaces\r\n    //only if splitString[1] exists\r\n    let splicedString;\r\n    if(splitString.length === 2){\r\n        //\r\n        splicedString = splitString[1].slice(1);\r\n    };\r\n    \r\n    //if the comma isnt a thing, rearrange things so they are in data format can check for state abbrev\r\n    if(splitString.length === 1){ //\"park city utah\" no comma before state\r\n        //check the last word\r\n        splitString = splitString[0].split(\" \"); //[\"park\",\"city\",\"utah\"]\r\n\r\n        //temp save last\r\n        let tempPossibleState = splitString[splitString.length - 1];\r\n\r\n        //remove last\r\n        splitString.pop(); //[\"park\",\"city\"]\r\n        \r\n        //join all\r\n        let tempJoinString = [];\r\n        tempJoinString[0] = splitString.join(\" \"); //\"park city\"\r\n        \r\n        //now need to join the first parts and leave the last part like [\"park city\", \"utah\"]\r\n        tempJoinString.push(tempPossibleState);\r\n        splitString = tempJoinString;\r\n        //console.log(tempJoinString);\r\n\r\n        splicedString = splitString[1];\r\n    };\r\n\r\n    //console.log(splicedString);\r\n    \r\n    let stateSearch = stateFull.indexOf(splicedString); //-1 if no result, # of index if match\r\n    if(stateSearch !== -1){\r\n        //found match\r\n        return splitString[0] + \", \" + stateAbbv[stateSearch];\r\n    }else{\r\n        //no match found in the statefull\r\n\r\n        //start a new search for searching stateabbv for capitalization purposes\r\n        let innerStateSearch = stateAbbvTitleCaps.indexOf(splicedString);\r\n        if(innerStateSearch !== -1){\r\n            //found inner match\r\n            return splitString[0] + \", \" + stateAbbv[innerStateSearch];\r\n        }else{\r\n            //in 2 searches, found nothing\r\n            return inputString;\r\n        };\r\n    };\r\n};","import React, { useState, useEffect } from 'react';\r\n\r\n// layout import\r\nimport { \r\n    Container, \r\n    Button,\r\n    Row,\r\n    Col,\r\n    InputGroup,\r\n    FormControl\r\n} from 'react-bootstrap';\r\nimport { \r\n    Link,\r\n    useParams,\r\n    useNavigate,\r\n} from 'react-router-dom';\r\nimport '../css/nav.css';\r\n\r\n// utility import\r\nimport CreatePreviewImage from './CreatePreviewImage.js';\r\nimport { textValidation } from './textValidation.js';\r\n\r\n\r\n// start page\r\nconst CreateTagPage = () => {\r\n    const navigate = useNavigate();\r\n\r\n    // the number it grabs in the url is actually a string, so make it int\r\n    let thisColorCode = useParams().id;\r\n    let colorInt = parseInt(thisColorCode);\r\n    \r\n    // set the submit array(same data format as multi tag) to default values\r\n    const[ submitArray, setSubmitArray ] = useState([{\r\n        name: \"\",\r\n        color: colorInt,\r\n        secondLine: \"\",\r\n        thirdLine: \"\",\r\n        requestor: \"\",\r\n        comments: \"\",\r\n        quantity: (() => { // new version of default quantity setter is an 'immediately invoked function expression'\r\n            if(colorInt === 1){\r\n\r\n                // plain green tag\r\n                return \"2-PINS\";\r\n            }else if(colorInt === 4 || colorInt === 12){\r\n\r\n                // ski patrol and black outdoor tag with deerhead\r\n                return \"3-VELCRO\"\r\n            }else if(colorInt ===  13){\r\n\r\n                // old mtn ops window tag\r\n                return \"3-CARDS\"\r\n            }else{\r\n\r\n                // everything else\r\n                return \"2-MAGNETS\"\r\n            };\r\n        })(),\r\n    }]);\r\n\r\n\r\n    // submit button on request\r\n    const submitRequest = () => {\r\n        // check to make sure user hasn't done in-browser html magic to bypass disabled submit button\r\n        // an empty or invalid request\r\n        if(submitGrey === false){\r\n            // grab any data and jsonify\r\n            let tagData = JSON.parse(localStorage.getItem(\"tagData\"));\r\n\r\n            // null catch\r\n            if(tagData == null){\r\n                tagData = [];\r\n            };\r\n\r\n            // push data into submitArray[0]\r\n            tagData.push({\r\n                requestor: submitArray[0].requestor,\r\n                name: submitArray[0].name,\r\n                colorCode: submitArray[0].color,\r\n                titlecity: submitArray[0].secondLine,\r\n                thirdline: submitArray[0].thirdLine,\r\n                quantity: submitArray[0].quantity,\r\n                comments: submitArray[0].comments,\r\n            });\r\n\r\n            // store locally\r\n            localStorage.setItem(\"tagData\", JSON.stringify(tagData));\r\n            tagData = JSON.parse(localStorage.getItem(\"tagData\"));\r\n            console.log(tagData);\r\n\r\n            // redirect\r\n            navigate(\"/dv/status\");\r\n        }else{\r\n            // failed, this shouldn't happen though\r\n        };\r\n    }\r\n\r\n    /*\r\n    // debug: what is submitArray on update\r\n    useEffect(() => {\r\n        console.log(submitArray);\r\n    },[submitArray]);\r\n    */\r\n\r\n    // update the status text and disable/enable button\r\n    useEffect(() => {\r\n        // also update the submission status, e.g. you need X or Y to submit\r\n        // if empty string or 0\r\n        if(submitArray[0].name === \"\" && submitArray[0].requestor === \"\"){\r\n            // false due to name AND requestor\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(0);\r\n        }else if(submitArray[0].name === \"\"){\r\n            // false only to name\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(2);\r\n        }else if(submitArray[0].requestor === \"\"){\r\n            // false only to requestor\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(1);\r\n        }else if(submitArray[0].name !== \"\" && submitArray[0].requestor !== \"\"){\r\n            // true only if name AND requestor are not empty strings set from textValidation\r\n            setSubmitGrey(false);\r\n            setStatusTextIndex(4);\r\n        }else{\r\n            // some other condition\r\n            console.log(\"updateSubmitGrey() ran into some other condition on validation!\");\r\n        };\r\n\r\n    },[submitArray]);\r\n\r\n\r\n    // submit grey button text and status text\r\n    const[ submitGrey, setSubmitGrey ] = useState(true);\r\n    // for the status text, only the index of it changes, not the actual string [4] is empty string\r\n    const statusText = [\r\n        \"There must be a requestor, The Name on the tag must be at least 3 characters\",\r\n        \"There must be a requestor.\",\r\n        \"The Name on the tag must be at least 3 characters\",\r\n        \"Submitting...\",\r\n        \"\"\r\n    ];\r\n    const[ statusTextIndex, setStatusTextIndex ] = useState(0);\r\n\r\n\r\n    // setting layout sizes\r\n    const xsSize = 12;\r\n    const mdSize = 6;\r\n    // const lgSize = 6;\r\n\r\n    // return\r\n    return (\r\n        <Container>\r\n            <Row className=\"justify-content-between nav-h4-bar-bg\">\r\n                <Col className=\"p-0\">\r\n                    <Link to=\"/dv/\">\r\n                        <Button>\r\n                            BACK\r\n                        </Button>\r\n                    </Link>\r\n                </Col>\r\n                <Col>\r\n                {\r\n                    // color codes and their titles in the navbar\r\n                    colorInt === 1 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW GREEN TAG\r\n                    </h4>\r\n                }\r\n                {\r\n                    colorInt === 2 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW GREEN DEERHEAD TAG\r\n                    </h4>\r\n                }\r\n                {\r\n                    colorInt === 3 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW BRONZE TAG\r\n                    </h4>\r\n                }\r\n                {\r\n                    colorInt === 14 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW BLACK DIAMOND LODGE TAG\r\n                    </h4>\r\n                }\r\n                {\r\n                    colorInt === 4 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW REGULAR OUTDOOR TAG\r\n                    </h4>\r\n                }\r\n                {\r\n                    colorInt === 12 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW OUTDOOR SKI PATROL TAG\r\n                    </h4>\r\n                }\r\n                {\r\n                    colorInt === 13 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW WINDOW TAG FOR UNDERARMOUR\r\n                    </h4>\r\n                }\r\n                </Col>\r\n                <Col></Col>\r\n            </Row>\r\n            <Row className=\"mt-3\">\r\n                <Col xs={xsSize} md={mdSize} lg={4} className=\"justify-content-center\">\r\n                    <Row>Preview: </Row>\r\n                    <Row>\r\n                        <CreatePreviewImage data={{ \r\n                            colorCode: colorInt, \r\n                            name: submitArray[0].name,\r\n                            secondLine: submitArray[0].secondLine,\r\n                            thirdLine: submitArray[0].thirdLine\r\n                        }} />\r\n                    </Row>\r\n                </Col>\r\n                <Col xs={xsSize} md={mdSize} lg={8}>\r\n                    <Row>\r\n                        <InputGroup className=\"mt-4\">\r\n                            <FormControl\r\n                                placeholder=\"Requestor's Name and Department\"\r\n                                aria-label=\"Requestor\"\r\n                                onChange={ e => {\r\n                                    // text validate\r\n                                    let validatedText = textValidation(e.target.value, 3);\r\n\r\n                                    // only update if not false\r\n                                    if(validatedText !== 0){\r\n                                        // grab prior values except for changed element\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.requestor = validatedText;\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }else{\r\n                                        // otherwise just set it to empty string\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.requestor = \"\";\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </InputGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <FormControl\r\n                                placeholder=\"Name on tag\"\r\n                                aria-label=\"Name\"\r\n                                onChange={ e => {\r\n                                    // text validate\r\n                                    let validatedText = textValidation(e.target.value, 3, true);\r\n\r\n                                    // only update if not false\r\n                                    if(validatedText !== 0){\r\n                                        // grab prior values except for changed element\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.name = validatedText;\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }else{\r\n                                        // otherwise just set it to empty string\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.name = \"\";\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </InputGroup>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        placeholder=\"Title OR: City, ST\"\r\n                        aria-label=\"Second Line\"\r\n                        onChange={ e => {\r\n                            // text validate\r\n                            let validatedText = textValidation(e.target.value, 3, true);\r\n\r\n                            // grab prior values except for changed element\r\n                            let priorSubmitObj = submitArray[0];\r\n                            priorSubmitObj.secondLine = validatedText;\r\n                            setSubmitArray([priorSubmitObj]);\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        placeholder=\"Third Line(if applicable)\"\r\n                        aria-label=\"Third Line\"\r\n                        onChange={ e => {\r\n                            // text validate\r\n                            let validatedText = textValidation(e.target.value, 3, true);\r\n\r\n                            // grab prior values except for changed element\r\n                            let priorSubmitObj = submitArray[0];\r\n                            priorSubmitObj.thirdLine = validatedText;\r\n                            setSubmitArray([priorSubmitObj]);\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        as=\"textarea\"\r\n                        placeholder=\"Comments\"\r\n                        aria-label=\"Comments\"\r\n                        onChange={ e => {\r\n                            // text validate\r\n                            let validatedText = textValidation(e.target.value);\r\n\r\n                            // grab prior values except for changed element\r\n                            let priorSubmitObj = submitArray[0];\r\n                            priorSubmitObj.comments = validatedText;\r\n                            setSubmitArray([priorSubmitObj]);\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            {\r\n                (colorInt === 1 || colorInt === 2 || colorInt === 3) &&\r\n                <Row className=\"justify-content-around pinmag-row mt-3\">\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <InputGroup>\r\n                            <InputGroup.Radio \r\n                                name=\"pinmag\" \r\n                                aria-label=\"Radio for PIN\" \r\n                                defaultChecked={ (colorInt === 1) ? true : false }\r\n                                onChange={e => {\r\n                                    // if checked is true\r\n                                    if(e.target.checked){\r\n                                        // set value accordingly\r\n                                        let oldSubmitArray = submitArray;\r\n                                        oldSubmitArray[0].quantity = \"2-PINS\";\r\n                                        setSubmitArray([...oldSubmitArray]);\r\n                                    }\r\n                                }}\r\n                            />\r\n                            <InputGroup.Text>2 PINS</InputGroup.Text>\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <InputGroup>\r\n                            <InputGroup.Radio \r\n                                name=\"pinmag\" \r\n                                aria-label=\"Radio for PIN\" \r\n                                defaultChecked={ (colorInt !== 1) ? true : false }\r\n                                onChange={e => {\r\n                                    // if checked is true\r\n                                    if(e.target.checked){\r\n                                        // set value accordingly\r\n                                        let oldSubmitArray = submitArray;\r\n                                        oldSubmitArray[0].quantity = \"2-MAGNETS\";\r\n                                        setSubmitArray([...oldSubmitArray]);\r\n                                    }\r\n                                }}\r\n                            />\r\n                            <InputGroup.Text>2 MAGNETS</InputGroup.Text>\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <InputGroup>\r\n                            <InputGroup.Radio \r\n                                name=\"pinmag\" \r\n                                aria-label=\"Radio for PIN and MAG\" \r\n                                onChange={e => {\r\n                                    // if checked is true\r\n                                    if(e.target.checked){\r\n                                        // set value accordingly\r\n                                        let oldSubmitArray = submitArray;\r\n                                        oldSubmitArray[0].quantity = \"1-PIN + 1-MAGNET\";\r\n                                        setSubmitArray([...oldSubmitArray]);\r\n                                    }\r\n                                }}\r\n                            />\r\n                            <InputGroup.Text>1 PIN + 1 MAGNET</InputGroup.Text>\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            <Row className=\"mt-3 justify-content-end\">\r\n                <Col xs={xsSize} md={mdSize} lg=\"auto\">\r\n                    <p className=\"mt-2\">{ statusText[statusTextIndex] }</p>\r\n                </Col>\r\n                <Col xs={xsSize} md={mdSize} lg=\"auto\">\r\n                    <Button type=\"submit\" disabled={ submitGrey } onClick={ submitRequest }>Submit Request</Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\n  \r\n  export default CreateTagPage;","import React, { \r\n    useState,\r\n    lazy,\r\n    Suspense,\r\n    useEffect,\r\n} from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faDiagramProject } from '@fortawesome/free-solid-svg-icons';\r\nimport { \r\n    Row, \r\n    Col, \r\n    Container \r\n} from 'react-bootstrap';\r\nimport {\r\n    Link,\r\n    Routes,\r\n    Route\r\n} from \"react-router-dom\";\r\nimport '../css/app.css';\r\nimport ProjectDV from '../projects/dvnametags/js/App.js';\r\nimport ProjectDVHomePage from '../projects/dvnametags/js/HomePage.js';\r\nimport ProjectDVStatusPage from '../projects/dvnametags/js/StatusPage.js';\r\nimport ProjectDVCreatePage from '../projects/dvnametags/js/CreateTagPage.js';\r\n\r\nconst ProjectThis = lazy( () => import('../projects/this/Proj.js'));\r\nconst ProjectSanAn = lazy( () => import('../projects/puremaintenance/App.js'));\r\nconst ProjectRune = lazy( () => import('../projects/rsgold/RSGold.js'));\r\nconst ProjectMarket = lazy( () => import('../projects/market/App.js'));\r\n\r\n// lazy load spinner\r\nconst renderLoader = (\r\n    <span className=\"sr-only\">\r\n        Loading...\r\n    </span>\r\n);\r\n\r\nfunction Projects() {\r\n    const projectListArray = [{\r\n        label: \"This Site\",\r\n        desc: \"This site. 2022-present.\",\r\n        url: \"/\",\r\n    },{\r\n        label: \"Deer Valley\",\r\n        desc: \"An internal website I made for Deer Valley Ski Resort Employees to order nametags. 2019-present.\",\r\n        url: \"dv\",\r\n    },{\r\n        label: \"San Antonio\",\r\n        desc: \"A site I made for my uncle with his Mold Remediation business. 2017.\",\r\n        url: \"sa\",\r\n    },{\r\n        label: \"Runescape\",\r\n        desc: \"A site I made for some family and myself to sell in game currency. 2014.\",\r\n        url: \"rs\",\r\n    },{\r\n        label: \"Market Game\",\r\n        desc: \"A pseudo-market game where you can trade a fake currency. 2022.\",\r\n        url: \"mkt\",\r\n    }];\r\n\r\n\r\n    // dynamically set description and change .active class on link button\r\n    const[description, setDescription] = useState(\"\");\r\n    const[btnActiveIndex, setBtnActiveIndex] = useState(0);\r\n    const changeActivePage = (description, indexOfElement) => {\r\n        setDescription(description);\r\n        setBtnActiveIndex(indexOfElement);\r\n    };\r\n\r\n    return (\r\n        <Container id=\"project-panel\">\r\n            <Row className=\"align-items-center\">\r\n                <FontAwesomeIcon size=\"lg\" icon={faDiagramProject} />\r\n                <h2>Projects</h2>\r\n                <p className=\"mt-2\">{description}</p>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={2} id=\"project-list-parent\">\r\n                {\r\n                    projectListArray.map((item, index) => \r\n                        <Row key={index}>\r\n                            <Link to={item.url} onClick={() => changeActivePage(item.desc, index)} className={\"btn btn-outline-secondary w-100 mt-2 pt-2 pb-0\" + (index === btnActiveIndex ? \" active\" : \"\")}>\r\n                                <h4>\r\n                                    {item.label}\r\n                                </h4>\r\n                            </Link>\r\n                        </Row>\r\n                    )\r\n                }\r\n                </Col>\r\n                <Col xs={10} id=\"active-page-parent\" className=\"p-0\">\r\n                    <Routes>\r\n                        <Route path=\"/\" element={\r\n                            <Suspense fallback={ renderLoader }>\r\n                                <ProjectThis />\r\n                            </Suspense>\r\n                        } />\r\n                        <Route path=\"/dv\" element={<ProjectDV />}>\r\n                            <Route path=\"\" element={<ProjectDVHomePage />} />\r\n                            <Route path=\"status\" element={<ProjectDVStatusPage />} />\r\n                            <Route path=\"create/:id\" element={<ProjectDVCreatePage />} />\r\n                        </Route>\r\n                        <Route path=\"/sa\" element={\r\n                            <Suspense fallback={ renderLoader }>\r\n                                <ProjectSanAn />\r\n                            </Suspense>\r\n                        } />\r\n                        <Route path=\"/rs\" element={\r\n                            <Suspense fallback={ renderLoader }>\r\n                                <ProjectRune />\r\n                            </Suspense>\r\n                        } />\r\n                        <Route path=\"/mkt\" element={\r\n                            <Suspense fallback={ renderLoader }>\r\n                                <ProjectMarket />\r\n                            </Suspense>\r\n                        } />\r\n                    </Routes>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n  \r\n  export default Projects;\r\n  ","import React from 'react';\r\nimport { \r\n    Col,\r\n    Row,\r\n    Container\r\n} from 'react-bootstrap';\r\nimport '../css/tags.css';\r\nimport '../css/signcolor.css';\r\n\r\nfunction colorCodeToClass(colorCode){\r\n    /*\r\n    tagType obj are the classes to apply and default texts on each\r\n    bg background class, \r\n    img is the deer head logo, null-space is the default class that deletes the class\r\n    in the event that there is no deer head\r\n    defName: default Name placeholder\r\n    defSecond: default second line text placeholder\r\n    quantity: the default quantity for each tag type(unchangeable, only for info purposes)\r\n    -\r\n    see CreateSignColor for tag id list\r\n    */\r\n    let tagType = {\r\n        bg: \"\",\r\n        img: \"null-space\",\r\n        defName: \"Name\",\r\n        defSecond: \"City, ST\",\r\n        quantity: \"x2\"\r\n    };\r\n\r\n    // translate color code to image type using classes\r\n    if(colorCode === 1){\r\n                \r\n        // 1: green pin no deerhead(normal nametag and default selection)\r\n        tagType.bg = \"tag-green\";\r\n    }else if(colorCode === 2){\r\n\r\n        // 2: green magnet deerhead\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n    }else if(colorCode === 3){\r\n\r\n        // 3: bronze magnet engraved deerhead\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvblack-img\";\r\n    }else if(colorCode === 4){\r\n\r\n        // 4: outdoor tags\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.img = \"dvwhite-img\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 5){\r\n\r\n        // 5: sign, add details in comments\r\n        tagType.bg = \"tag-sign\";\r\n        tagType.defName = \"Sign\";\r\n        tagType.defSecond = \"Put details in the comments\";\r\n        tagType.quantity = \"\";\r\n    }else if(colorCode === 7){\r\n\r\n        // 7: repeat 1 but with title instead of city, st\r\n        tagType.bg = \"tag-green\";\r\n        tagType.defSecond = \"Title\";\r\n    }else if(colorCode === 8){\r\n\r\n        // 8: repeat 2 but with title instead of city, st\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n        tagType.defSecond = \"Title\";\r\n    }else if(colorCode === 9){\r\n\r\n        // 9: repeat 3 but with title instead of city, st\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvwhite-img\";\r\n        tagType.defSecond = \"Title\";\r\n    }else if(colorCode === 10){\r\n\r\n        // 10: repeat 4 but with title instead of city, st\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.defSecond = \"Title\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 11){\r\n\r\n        // 11: basket check tag\r\n        tagType.bg = \"tag-basket\";\r\n        tagType.defName = \"<p style='font-size:60px;position:relative;top:-20%;'>&#8226;</p>\";\r\n        tagType.defSecond = \"<p style='font-size:19px;position:relative;bottom:30%;'>Basket Check</p>\";\r\n        tagType.quantity = \"\";\r\n    }else if(colorCode === 12){\r\n\r\n        // 12: outdoor tag for ski patrol\r\n        tagType.bg = \"tag-patrol\";\r\n        tagType.img = \"dvpatrol-img\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 13){\r\n\r\n        // 13: old outdoor tags that fit inside old mtn ops uniforms\r\n        tagType.bg = \"tag-oldoutdoor\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 14){\r\n\r\n        // 14: black diamond tags\r\n        tagType.bg = \"tag-blackdiamond\";\r\n        tagType.img = \"dvblackdiamond-img\";\r\n        tagType.quantity = \"x2\";\r\n    }else if(colorCode === 15){\r\n\r\n        // 15: regular black indoor\r\n        tagType.bg = \"tag-black\";\r\n        tagType.quantity = \"x2\";\r\n    }else if(colorCode === 16){\r\n\r\n        // 16: club 1981 -- blk text, silver bg\r\n        tagType.bg = \"tag-blackdiamond\";\r\n        tagType.img = \"dvclub-img\";\r\n        tagType.quantity = \"x2\";\r\n    }else{\r\n\r\n        // anything else, other, details in comments\r\n        tagType.bg = \"tag-other\";\r\n    }\r\n\r\n    // return value, e.g. tagType = { bg: tag-green, img: null-space }\r\n    return tagType;\r\n};\r\n\r\n\r\nfunction CreatePreviewImage(data) {\r\n    /*\r\n    data use format for non signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        secondLine,\r\n        colorCode,\r\n        thirdLine(if it exists)\r\n    } />\r\n    -\r\n    data use format for signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        height,\r\n        width,\r\n        signColor,\r\n        attachment,\r\n        thickness\r\n    } />\r\n    */\r\n\r\n    // console.log(data); // correct injection would be e.g. data.data.colorCode\r\n    let tagType = colorCodeToClass(data.data.colorCode);\r\n    // console.log(tagType.img);\r\n    tagType.bg = tagType.bg + \"  justify-content-between\";\r\n\r\n    // if custom sign\r\n    let pixelHeight;\r\n    let pixelWidth;\r\n    let splitClasses = [];\r\n    let newLineContents = data.data.name;\r\n    // console.log(data.data.colorCode);\r\n    \r\n    if(data.data.colorCode === 5){\r\n        // grab signcolor classes\r\n        // console.log(data.data.quantity);\r\n        splitClasses = data.data.signColor.split(\" / \");\r\n        splitClasses[0] = \"color-\" + splitClasses[0].toLowerCase();\r\n        splitClasses[1] = \"bg-\" + splitClasses[1].toLowerCase();\r\n        \r\n        pixelHeight = parseFloat(data.data.height);\r\n        pixelWidth = parseFloat(data.data.width);\r\n\r\n        // do sign maths\r\n        pixelHeight *= 50;\r\n        pixelWidth *= 50;\r\n        pixelHeight = pixelHeight + \"px\";\r\n        pixelWidth = pixelWidth + \"px\";\r\n\r\n        newLineContents = newLineContents.split(\"\\n\");\r\n        // console.log(newLineContents);\r\n    };\r\n    \r\n\r\n    // return page with compiled data\r\n    return (\r\n        <Col xs={12} md={6} lg={4} className=\"px-0\">\r\n            <Container className=\"\">\r\n                <Row className={ tagType.bg }>\r\n                    {\r\n                        !(tagType.img === \"null-space\") &&\r\n                        <div className={ tagType.img }>\r\n                        </div>\r\n                    }\r\n                    <div className=\"title-parent\">\r\n                        <div className=\"title-text justify-content-center\">\r\n                            { data.data.name }\r\n                        </div>\r\n                        <div className=\"smaller-text justify-content-center\">\r\n                            { data.data.secondLine }\r\n                        </div>\r\n                        <div className=\"smaller-text justify-content-center\">\r\n                            { data.data.thirdLine }\r\n                        </div>\r\n                    </div>\r\n                </Row>\r\n            </Container>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default CreatePreviewImage;"],"names":["_jsx","Container","className","children","_jsxs","Navbar","id","NavPage","Col","Outlet","Row","xs","Link","to","Button","colorCode","name","secondLine","thirdLine","map","mapItem","index","CreatePreviewImage","data","lazy","renderLoader","Spinner","variant","animation","role","_useState","useState","color","titlecity","comments","requestor","status","statusClass","daysAgo","quantity","thirdline","_useState2","_slicedToArray","dataRow","setDataRow","useEffect","tagData","JSON","parse","localStorage","getItem","innerDataRow","i","length","push","current","concat","_toConsumableArray","InputGroup","FormControl","placeholder","undefined","md","Suspense","fallback","onClick","clear","textValidation","inputString","minChar","strictMode","outputString","string","regex","match","join","regexDelete","splitString","split","addCommaSpaces","pop","combinedString","word","firstChar","toUpperCase","slice","titleCapsify","splicedString","stateFull","stateAbbv","stateAbbvTitleCaps","lastIndex","replace","tempPossibleState","tempJoinString","stateSearch","indexOf","innerStateSearch","stateToAbbv","navigate","useNavigate","thisColorCode","useParams","colorInt","parseInt","submitArray","setSubmitArray","setSubmitGrey","setStatusTextIndex","console","log","_useState3","_useState4","submitGrey","_useState5","_useState6","statusTextIndex","lg","onChange","e","validatedText","target","value","priorSubmitObj","as","Radio","defaultChecked","checked","oldSubmitArray","Text","type","disabled","setItem","stringify","ProjectThis","ProjectSanAn","ProjectRune","ProjectMarket","description","setDescription","btnActiveIndex","setBtnActiveIndex","FontAwesomeIcon","size","icon","faDiagramProject","label","desc","url","item","indexOfElement","changeActivePage","Routes","Route","path","element","ProjectDV","ProjectDVHomePage","ProjectDVStatusPage","ProjectDVCreatePage","tagType","bg","img","defName","defSecond","colorCodeToClass","splitClasses","newLineContents","signColor","toLowerCase","parseFloat","height","width"],"sourceRoot":""}